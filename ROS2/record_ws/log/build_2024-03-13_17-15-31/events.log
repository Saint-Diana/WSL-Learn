[0.000000] (-) TimerEvent: {}
[0.000675] (my_record_utils) JobQueued: {'identifier': 'my_record_utils', 'dependencies': OrderedDict()}
[0.000902] (my_record_utils) JobStarted: {'identifier': 'my_record_utils'}
[0.069304] (my_record_utils) JobProgress: {'identifier': 'my_record_utils', 'progress': 'cmake'}
[0.070620] (my_record_utils) JobProgress: {'identifier': 'my_record_utils', 'progress': 'build'}
[0.070819] (my_record_utils) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/shen/learn/ROS2/record_ws/build/my_record_utils', '--', '-j16', '-l16'], 'cwd': '/home/shen/learn/ROS2/record_ws/build/my_record_utils', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('HTTPS_PROXY', 'http://127.0.0.1:7890/'), ('no_proxy', 'localhost,127.0.0.1,::1'), ('LANGUAGE', 'zh_CN:en'), ('USER', 'shen'), ('LC_TIME', 'en_US.UTF-8'), ('all_proxy', 'socks://127.0.0.1:7890/'), ('GIO_MODULE_DIR', '/home/shen/snap/code/common/.cache/gio-modules'), ('XDG_SESSION_TYPE', 'x11'), ('GIT_ASKPASS', '/snap/code/154/usr/share/code/resources/app/extensions/git/dist/askpass.sh'), ('GTK_EXE_PREFIX_VSCODE_SNAP_ORIG', ''), ('GDK_BACKEND_VSCODE_SNAP_ORIG', ''), ('SHLVL', '2'), ('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/shen'), ('CHROME_DESKTOP', 'code-url-handler.desktop'), ('LOCPATH_VSCODE_SNAP_ORIG', ''), ('OLDPWD', '/home/shen/learn/ROS2/record_ws/src'), ('TERM_PROGRAM_VERSION', '1.87.1'), ('DESKTOP_SESSION', 'ubuntu'), ('GTK_PATH', ''), ('NO_PROXY', 'localhost,127.0.0.1,::1'), ('GTK_IM_MODULE_FILE', '/home/shen/snap/code/common/.cache/immodules/immodules.cache'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('GSETTINGS_SCHEMA_DIR_VSCODE_SNAP_ORIG', ''), ('VSCODE_GIT_ASKPASS_MAIN', '/snap/code/154/usr/share/code/resources/app/extensions/git/dist/askpass-main.js'), ('LC_MONETARY', 'en_US.UTF-8'), ('VSCODE_GIT_ASKPASS_NODE', '/snap/code/154/usr/share/code/code'), ('SYSTEMD_EXEC_PID', '2077'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('https_proxy', 'http://127.0.0.1:7890/'), ('COLCON_PREFIX_PATH', '/home/shen/learn/ROS2/record_ws/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'shen'), ('ALL_PROXY', 'socks://127.0.0.1:7890/'), ('http_proxy', 'http://127.0.0.1:7890/'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_CONFIG_DIRS_VSCODE_SNAP_ORIG', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_SESSION_CLASS', 'user'), ('XDG_DATA_DIRS_VSCODE_SNAP_ORIG', '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('USERNAME', 'shen'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/opt/ros/humble/bin:/home/shen/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/work:@/tmp/.ICE-unix/2058,unix/work:/tmp/.ICE-unix/2058'), ('GTK_EXE_PREFIX', '/snap/code/154/usr'), ('PAPERSIZE', 'letter'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'en_US.UTF-8'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/c26329fc_00e5_4afe_b650_95e80b234b5d'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('GDK_BACKEND', 'x11'), ('DISPLAY', ':1'), ('LOCPATH', '/snap/code/154/usr/lib/locale'), ('LANG', 'zh_CN.UTF-8'), ('XDG_CURRENT_DESKTOP', 'Unity'), ('LC_TELEPHONE', 'en_US.UTF-8'), ('GIO_MODULE_DIR_VSCODE_SNAP_ORIG', ''), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-011d35cc21.sock'), ('GNOME_TERMINAL_SERVICE', ':1.103'), ('TERM_PROGRAM', 'vscode'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('GSETTINGS_SCHEMA_DIR', '/home/shen/snap/code/154/.local/share/glib-2.0/schemas'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('ORIGINAL_XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('SHELL', '/bin/bash'), ('LC_NAME', 'en_US.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GTK_PATH_VSCODE_SNAP_ORIG', ''), ('GTK_IM_MODULE_FILE_VSCODE_SNAP_ORIG', ''), ('LC_MEASUREMENT', 'en_US.UTF-8'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('LC_IDENTIFICATION', 'en_US.UTF-8'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/shen/learn/ROS2/record_ws/build/my_record_utils'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/home/shen/snap/code/154/.local/share:/home/shen/snap/code/154:/snap/code/154/usr/share:/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('HTTP_PROXY', 'http://127.0.0.1:7890/'), ('LC_NUMERIC', 'en_US.UTF-8'), ('LC_PAPER', 'en_US.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[0.099540] (-) TimerEvent: {}
[0.162428] (my_record_utils) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target topic_recorder\x1b[0m\n'}
[0.191215] (my_record_utils) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/topic_recorder.dir/src/topic_recorder.cpp.o\x1b[0m\n'}
[0.199698] (-) TimerEvent: {}
[0.300220] (-) TimerEvent: {}
[0.400776] (-) TimerEvent: {}
[0.501352] (-) TimerEvent: {}
[0.601934] (-) TimerEvent: {}
[0.702523] (-) TimerEvent: {}
[0.803400] (-) TimerEvent: {}
[0.903928] (-) TimerEvent: {}
[1.004387] (-) TimerEvent: {}
[1.104831] (-) TimerEvent: {}
[1.205281] (-) TimerEvent: {}
[1.305859] (-) TimerEvent: {}
[1.406317] (-) TimerEvent: {}
[1.506814] (-) TimerEvent: {}
[1.607265] (-) TimerEvent: {}
[1.707670] (-) TimerEvent: {}
[1.808069] (-) TimerEvent: {}
[1.908900] (-) TimerEvent: {}
[2.009285] (-) TimerEvent: {}
[2.110057] (-) TimerEvent: {}
[2.210426] (-) TimerEvent: {}
[2.310772] (-) TimerEvent: {}
[2.411115] (-) TimerEvent: {}
[2.511553] (-) TimerEvent: {}
[2.611956] (-) TimerEvent: {}
[2.712413] (-) TimerEvent: {}
[2.812877] (-) TimerEvent: {}
[2.913339] (-) TimerEvent: {}
[3.013801] (-) TimerEvent: {}
[3.114376] (-) TimerEvent: {}
[3.214798] (-) TimerEvent: {}
[3.315247] (-) TimerEvent: {}
[3.415682] (-) TimerEvent: {}
[3.441225] (my_record_utils) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[3.442123] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[3.442577] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.442835] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.443133] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.443311] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.443501] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.443685] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.443838] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.443964] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.444090] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/shen/learn/ROS2/record_ws/src/my_record_utils/src/topic_recorder.cpp:1\x1b[m\x1b[K:\n'}
[3.444368] (my_record_utils) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; MessageT = can_msgs::msg::Frame_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.444606] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = can_msgs::msg::Frame_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.444854] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = can_msgs::msg::Frame_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.445135] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.445350] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.445615] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/home/shen/learn/ROS2/record_ws/src/my_record_utils/src/topic_recorder.cpp:42:76:\x1b[m\x1b[K   required from here\n'}
[3.445798] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<can_msgs::msg::Frame_<std::allocator<void> >, std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[3.446098] (my_record_utils) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[3.446293] (my_record_utils) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.446469] (my_record_utils) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[3.446647] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[3.446878] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.447060] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.447190] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.447316] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.447460] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.447643] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.447821] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.448014] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.448198] (my_record_utils) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/shen/learn/ROS2/record_ws/src/my_record_utils/src/topic_recorder.cpp:1\x1b[m\x1b[K:\n'}
[3.448433] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448728] (my_record_utils) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[3.448906] (my_record_utils) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.449078] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.449259] (my_record_utils) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.449520] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450376] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; MessageT = can_msgs::msg::Frame_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450651] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = can_msgs::msg::Frame_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450882] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = can_msgs::msg::Frame_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.451092] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.451310] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.451529] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/home/shen/learn/ROS2/record_ws/src/my_record_utils/src/topic_recorder.cpp:42:76:\x1b[m\x1b[K   required from here\n'}
[3.451719] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.451896] (my_record_utils) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[3.452081] (my_record_utils) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.452285] (my_record_utils) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; MessageT = can_msgs::msg::Frame_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.452488] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = can_msgs::msg::Frame_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.452720] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = can_msgs::msg::Frame_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.452981] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.453209] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = can_msgs::msg::Frame_<std::allocator<void> >; CallbackT = std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void>, can_msgs::msg::Frame_<std::allocator<void> >, can_msgs::msg::Frame_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<can_msgs::msg::Frame_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.453444] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/home/shen/learn/ROS2/record_ws/src/my_record_utils/src/topic_recorder.cpp:42:76:\x1b[m\x1b[K   required from here\n'}
[3.453635] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.453898] (my_record_utils) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[3.454084] (my_record_utils) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.454241] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<can_msgs::msg::Frame_<std::allocator<void> >, std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.454441] (my_record_utils) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[3.454570] (my_record_utils) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.454696] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.454851] (my_record_utils) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[3.454978] (my_record_utils) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.455113] (my_record_utils) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<can_msgs::msg::Frame_<std::allocator<void> >, std::_Bind<void (TopicRecorder::*(TopicRecorder*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&) const>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const std::__cxx11::basic_string<char>&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&)>, std::function<void(const can_msgs::msg::Frame_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<can_msgs::msg::Frame_<std::allocator<void> >, std::default_delete<can_msgs::msg::Frame_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const can_msgs::msg::Frame_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<can_msgs::msg::Frame_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.455290] (my_record_utils) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[3.455416] (my_record_utils) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[3.515831] (-) TimerEvent: {}
[3.616291] (-) TimerEvent: {}
[3.716705] (-) TimerEvent: {}
[3.817166] (-) TimerEvent: {}
[3.917655] (-) TimerEvent: {}
[4.018108] (-) TimerEvent: {}
[4.118568] (-) TimerEvent: {}
[4.219003] (-) TimerEvent: {}
[4.319430] (-) TimerEvent: {}
[4.419880] (-) TimerEvent: {}
[4.520391] (-) TimerEvent: {}
[4.620874] (-) TimerEvent: {}
[4.721337] (-) TimerEvent: {}
[4.821830] (-) TimerEvent: {}
[4.922290] (-) TimerEvent: {}
[5.022786] (-) TimerEvent: {}
[5.123287] (-) TimerEvent: {}
[5.223747] (-) TimerEvent: {}
[5.324184] (-) TimerEvent: {}
[5.424659] (-) TimerEvent: {}
[5.525153] (-) TimerEvent: {}
[5.560733] (my_record_utils) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/topic_recorder.dir/build.make:76\xef\xbc\x9aCMakeFiles/topic_recorder.dir/src/topic_recorder.cpp.o] \xe9\x94\x99\xe8\xaf\xaf 1\n'}
[5.561211] (my_record_utils) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137\xef\xbc\x9aCMakeFiles/topic_recorder.dir/all] \xe9\x94\x99\xe8\xaf\xaf 2\n'}
[5.561513] (my_record_utils) StderrLine: {'line': b'gmake: *** [Makefile:146\xef\xbc\x9aall] \xe9\x94\x99\xe8\xaf\xaf 2\n'}
[5.564372] (my_record_utils) CommandEnded: {'returncode': 2}
[5.625341] (-) TimerEvent: {}
[5.703273] (my_record_utils) JobEnded: {'identifier': 'my_record_utils', 'rc': 2}
[5.713976] (-) EventReactorShutdown: {}
